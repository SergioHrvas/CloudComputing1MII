name: Node.js CI

# Ejecutar el flujo de trabajo en eventos push o pull request
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      # Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configurar la versi√≥n de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Puedes ajustar la versi√≥n de Node.js seg√∫n lo que uses

      # Instalar dependencias
      - name: Install dependencies
        run: npm install
        working-directory: './WildHaven/backend'

      # Esperar a que MongoDB est√© listo
      - name: Wait for MongoDB to be ready
        run: |
          until nc -z localhost 27017; do
            echo "Waiting for MongoDB...";
            sleep 1;
          done

      # Ejecutar pruebas
      - name: Run tests
        run: npm test
        working-directory: './WildHaven/backend'
        env:
          MONGODB_URI: mongodb://localhost:27017/wildhaven-test  # URI para MongoDB local

  test_cluster:
    runs-on: ubuntu-latest
    needs: test  # Dependencia en el trabajo 'test', para asegurar que solo se ejecute si los tests pasan

    steps:
      # Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configurar Docker y Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      # Iniciar los contenedores con Docker Compose
      - name: Start containers using Docker Compose
        run: |
          docker-compose -f ./docker-compose.yml up -d  # Inicia los contenedores en segundo plano

      # Verificar que los contenedores est√©n en ejecuci√≥n
      - name: Check if containers are running
        run: |
          docker ps  # Muestra los contenedores activos

      # Hacer peticiones HTTP para verificar que los contenedores respondan correctamente
      - name: Make HTTP requests to check container response
        run: |
          curl --fail http://localhost:3000  # Ajusta el puerto y URL seg√∫n lo que exponga tu contenedor
          curl --fail http://localhost:5000/api/health  # Ajusta seg√∫n la API que est√©s probando

      # Detener los contenedores despu√©s de las pruebas
      - name: Stop Docker containers
        run: |
          docker-compose down

  build_and_push:
    runs-on: ubuntu-latest
    needs: test_cluster  # Dependencia en el trabajo 'test_cluster', para asegurar que solo se ejecute si las pruebas del cl√∫ster pasan

    steps:
      # Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Iniciar sesi√≥n en GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          echo ${{ secrets.TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Paso para construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/sergiohrvas/wildhaven:app-node ./WildHaven/backend

      # Paso para subir la imagen Docker al GitHub Container Registry
      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/sergiohrvas/wildhaven:app-node

      # Listar archivos en el repositorio
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Print job status
        run: echo "üçè This job's status is ${{ job.status }}."
