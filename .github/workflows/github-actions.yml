name: Node.js CI

# Ejecutar el flujo de trabajo en eventos push o pull request
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test_cluster:
    runs-on: ubuntu-latest
    needs: test  # Dependencia en el trabajo 'test', para asegurar que solo se ejecute si los tests pasan

    steps:
      # 1. Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar Docker y Docker Compose
      - name: Set up Docker and Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get install docker docker-compose -y
          sudo usermod -aG docker $USER
          newgrp docker

      # 3. Construir las imágenes de Docker con 'docker-compose'
      - name: Build Docker images
        run: |
          docker-compose build --no-cache
        working-directory: './WildHaven'

      # 4. Iniciar los contenedores usando Docker Compose
      - name: Start containers using Docker Compose
        run: |
          docker-compose up -d
        working-directory: './WildHaven'

      # 5. Comprobar el estado de los contenedores después de Docker Compose
      - name: Check containers after Docker Compose up
        run: |
          docker-compose ps
        working-directory: './WildHaven'

      # 6. Verificar el estado de los contenedores
      - name: Check container status
        run: |
          docker ps -a

      # 7. Obtener los logs de la aplicación Node.js para depuración
      - name: LOG NODE APP
        run: |
          CONTAINER_ID=$(docker ps -qf "name=node-app")
          if [ -n "$CONTAINER_ID" ]; then
            docker logs $CONTAINER_ID
          else
            echo "node-app container is not running"
          fi

      # 8. Realizar peticiones HTTP para verificar la respuesta de los contenedores
      - name: Make HTTP requests to check container response
        run: |
          curl --fail --verbose http://localhost:4200
          curl --fail --verbose http://localhost:3800

      # 9. Detener los contenedores después de las pruebas
      - name: Stop Docker containers
        run: |
          docker-compose down
        working-directory: './WildHaven'
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      # Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configurar la versión de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Puedes ajustar la versión de Node.js según lo que uses

      # Instalar dependencias
      - name: Install dependencies
        run: npm install
        working-directory: './WildHaven/backend'

      # Esperar a que MongoDB esté listo
      - name: Wait for MongoDB to be ready
        run: |
          until nc -z localhost 27017; do
            echo "Waiting for MongoDB...";
            sleep 1;
          done

      # Ejecutar pruebas
      - name: Run tests
        run: npm test
        working-directory: './WildHaven/backend'
        env:
          MONGODB_URI: mongodb://localhost:27017/wildhaven-test  # URI para MongoDB local

  build_and_push:
    runs-on: ubuntu-latest
    needs: test_cluster  # Dependencia en el trabajo 'test_cluster', para asegurar que solo se ejecute si las pruebas del clúster pasan

    steps:
      # Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Iniciar sesión en GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          echo ${{ secrets.TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Paso para construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/sergiohrvas/wildhaven:app-node ./WildHaven/backend

      # Paso para subir la imagen Docker al GitHub Container Registry
      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/sergiohrvas/wildhaven:app-node

      # Listar archivos en el repositorio
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Print job status
        run: echo "🍏 This job's status is ${{ job.status }}."
